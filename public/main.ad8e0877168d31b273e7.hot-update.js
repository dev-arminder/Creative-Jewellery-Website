/*! For license information please see main.ad8e0877168d31b273e7.hot-update.js.LICENSE.txt */
"use strict";self.webpackHotUpdatefrontend_boilerplate("main",{"./app/components/Canvas/Home/Home.js":(t,e,i)=>{i.r(e),i.d(e,{default:()=>l});var s=i("./node_modules/ogl/src/core/Transform.js"),r=i("./node_modules/ogl/src/extras/Plane.js"),n=i("./node_modules/gsap/index.js"),a=i("./app/components/Canvas/Home/Media.js"),h=i("./node_modules/lodash/map.js"),o=i.n(h);const l=class{constructor({gl:t,scene:e,sizes:i}){this.x={current:0,target:0,lerp:.1},this.y={current:0,target:0,lerp:.1},this.scrollCurrent={x:0,y:0},this.scroll={x:0,y:0},this.gl=t,this.group=new s.Transform,this.sizes=i,this.galleryElement=document.querySelector(".home__gallery"),this.mediasElements=document.querySelectorAll(".home__gallery_media_image"),this.createGeometry(),this.createGallery(),this.group.setParent(e)}createGeometry(){this.geometry=new r.Plane(this.gl)}createGallery(){this.medias=o()(this.mediasElements,((t,e)=>new a.default({element:t,geometry:this.geometry,index:e,gl:this.gl,scene:this.group,sizes:this.sizes})))}onResize(t){this.galleryBounds=this.galleryElement.getBoundingClientRect(),this.sizes=t.sizes,this.gallerySizes={width:this.galleryBounds.width/window.innerWidth*this.sizes.width,height:this.galleryBounds.height/window.innerHeight*this.sizes.height},this.scroll.x=this.x.target=0,this.scroll.y=this.y.target=0,o()(this.medias,(e=>{e.onResize(t,this.scroll)}))}onTouchDown({x:t,y:e}){this.scrollCurrent.x=this.scroll.x,this.scrollCurrent.y=this.scroll.y}onTouchMove({x:t,y:e}){const i=t.start-t.end,s=e.start-e.end;this.x.target=this.scrollCurrent.x-i,this.y.target=this.scrollCurrent.y-s}onTouchUp({x:t,y:e}){}onWheel({pixelX:t,pixelY:e}){this.x.target+=t,this.y.target+=e}update(){this.galleryBounds&&(this.x.current=n.default.utils.interpolate(this.x.current,this.x.target,this.x.lerp),this.y.current=n.default.utils.interpolate(this.y.current,this.y.target,this.y.lerp),this.scroll.x<this.x.current?this.x.direction="right":this.scroll.x>this.x.current&&(this.x.direction="left"),this.scroll.y<this.y.current?this.y.direction="up":this.scroll.y>this.y.current&&(this.y.direction="down"),this.scroll.x=this.x.current,this.scroll.y=this.y.current,o()(this.medias,((t,e)=>{const i=t.mesh.scale.x/2,s=t.mesh.scale.y/2;if("left"===this.x.direction){t.mesh.position.x+i<-this.sizes.width/2&&(t.extra.x+=this.gallerySizes.width,t.mesh.rotation.z=n.default.utils.random(.02*-Math.PI,.02*Math.PI))}else if("right"===this.x.direction){t.mesh.position.x-i>this.sizes.width/2&&(t.extra.x-=this.gallerySizes.width,t.mesh.rotation.z=n.default.utils.random(.02*-Math.PI,.02*Math.PI))}if("up"===this.y.direction){t.mesh.position.y+s<-this.sizes.height/2&&(t.extra.y+=this.gallerySizes.height,t.mesh.rotation.z=n.default.utils.random(.02*-Math.PI,.02*Math.PI))}else if("down"===this.y.direction){t.mesh.position.y-s>this.sizes.height/2&&(t.extra.y-=this.gallerySizes.height,t.mesh.rotation.z=n.default.utils.random(.02*-Math.PI,.02*Math.PI))}t.update(this.scroll)})))}}},"./app/components/Canvas/Home/Media.js":(t,e,i)=>{i.r(e),i.d(e,{default:()=>a});var s=i("./node_modules/ogl/src/core/Texture.js"),r=i("./node_modules/ogl/src/core/Program.js"),n=i("./node_modules/ogl/src/core/Mesh.js");Object(function(){var t=new Error("Cannot find module '../../shaders/plane-fragment.glsl'");throw t.code="MODULE_NOT_FOUND",t}()),Object(function(){var t=new Error("Cannot find module '../../shaders/plane-vertex.glsl'");throw t.code="MODULE_NOT_FOUND",t}());const a=class{constructor({element:t,geometry:e,gl:i,scene:s,index:r,sizes:n}){this.element=t,this.geometry=e,this.gl=i,this.scene=s,this.index=r,this.sizes=n,this.createTexture(),this.createProgram(),this.createMesh(),this.extra={x:0,y:0}}createTexture(){this.texture=new s.Texture(this.gl),this.image=new window.Image,this.image.crossOrigin="anonymous",this.image.src=this.element.getAttribute("data-src"),this.image.onload=()=>this.texture.image=this.image}createProgram(){this.program=new r.Program(this.gl,{fragment:Object(function(){var t=new Error("Cannot find module '../../shaders/plane-fragment.glsl'");throw t.code="MODULE_NOT_FOUND",t}()),vertex:Object(function(){var t=new Error("Cannot find module '../../shaders/plane-vertex.glsl'");throw t.code="MODULE_NOT_FOUND",t}()),uniforms:{tMap:{value:this.texture}}})}createMesh(){this.mesh=new n.Mesh(this.gl,{program:this.program,geometry:this.geometry}),this.mesh.setParent(this.scene)}createBound({sizes:t}){this.sizes=t,this.bounds=this.element.getBoundingClientRect(),this.updateScale(t),this.updateX(),this.updateY()}onResize(t,e){this.extra={x:0,y:0},this.createBound(t),this.updateX(e?e.x:0),this.updateY(e?e.y:0)}updateScale({width:t,height:e}){this.height=this.bounds.height/window.innerHeight,this.width=this.bounds.width/window.innerWidth,this.mesh.scale.x=this.sizes.width*this.width,this.mesh.scale.y=this.sizes.height*this.height}updateX(t=0){this.x=(this.bounds.left+t)/window.innerWidth,this.mesh.position.x=-this.sizes.width/2+this.mesh.scale.x/2+this.x*this.sizes.width+this.extra.x}updateY(t=0){this.y=(this.bounds.top+t)/window.innerHeight,this.mesh.position.y=this.sizes.height/2-this.mesh.scale.y/2-this.y*this.sizes.height+this.extra.y}update(t){this.bounds&&(this.updateX(t.x),this.updateY(t.y))}}},"./app/components/Canvas/index.js":(t,e,i)=>{i.r(e),i.d(e,{default:()=>h});var s=i("./node_modules/ogl/src/core/Renderer.js"),r=i("./node_modules/ogl/src/core/Camera.js"),n=i("./node_modules/ogl/src/core/Transform.js"),a=i("./app/components/Canvas/Home/Home.js");const h=class{constructor(){this.x={start:0,end:0,distance:0},this.y={start:0,end:0,distance:0},this.createRenderer(),this.createCamera(),this.createScene(),this.onResize(),this.createHome()}createRenderer(){this.renderer=new s.Renderer({alpha:!0,antialias:!0}),this.gl=this.renderer.gl;document.querySelector("#main-script").before(this.gl.canvas)}createCamera(){this.camera=new r.Camera(this.gl),this.camera.position.z=5}createScene(){this.scene=new n.Transform}createHome(){this.home=new a.default({gl:this.gl,scene:this.scene,sizes:this.sizes})}onTouchDown(){this.isDown=!0,this.x.start=event.touches?event.touches[0].clientX:event.clientX,this.y.start=event.touches?event.touches[0].clientY:event.clientY,this.home&&this.home.onTouchDown({x:this.x,y:this.y})}onTouchMove(){if(!this.isDown)return;const t=event.touches?event.touches[0].clientX:event.clientX,e=event.touches?event.touches[0].clientY:event.clientY;this.x.end=t,this.y.end=e,this.home&&this.home.onTouchMove({x:this.x,y:this.y})}onTouchUp(){this.isDown=!1;const t=event.touches?event.touches[0].clientX:event.clientX,e=event.touches?event.touches[0].clientY:event.clientY;this.x.end=t,this.y.end=e,this.home&&this.home.onTouchUp({x:this.x,y:this.y})}onResize(){this.renderer.setSize(window.innerWidth,window.innerHeight),this.camera.perspective({aspect:window.innerWidth/window.innerHeight});const t=this.camera.fov*(Math.PI/180),e=2*Math.tan(t/2)*this.camera.position.z,i=e*this.camera.aspect;this.sizes={height:e,width:i},this.home&&this.home.onResize({sizes:this.sizes})}onWheel(t){this.home&&this.home.onWheel(t)}update(t){this.home&&this.home.update(),this.renderer.render({camera:this.camera,scene:this.scene})}}},"./node_modules/ogl/src/core/Geometry.js":(t,e,i)=>{i.r(e),i.d(e,{Geometry:()=>o});var s=i("./node_modules/ogl/src/math/Vec3.js");const r=new s.Vec3;let n=1,a=1,h=!1;class o{constructor(t,e={}){t.canvas||console.error("gl not passed as first argument to Geometry"),this.gl=t,this.attributes=e,this.id=n++,this.VAOs={},this.drawRange={start:0,count:0},this.instancedCount=0,this.gl.renderer.bindVertexArray(null),this.gl.renderer.currentGeometry=null,this.glState=this.gl.renderer.state;for(let t in e)this.addAttribute(t,e[t])}addAttribute(t,e){if(this.attributes[t]=e,e.id=a++,e.size=e.size||1,e.type=e.type||(e.data.constructor===Float32Array?this.gl.FLOAT:e.data.constructor===Uint16Array?this.gl.UNSIGNED_SHORT:this.gl.UNSIGNED_INT),e.target="index"===t?this.gl.ELEMENT_ARRAY_BUFFER:this.gl.ARRAY_BUFFER,e.normalized=e.normalized||!1,e.stride=e.stride||0,e.offset=e.offset||0,e.count=e.count||(e.stride?e.data.byteLength/e.stride:e.data.length/e.size),e.divisor=e.instanced||0,e.needsUpdate=!1,e.buffer||(e.buffer=this.gl.createBuffer(),this.updateAttribute(e)),e.divisor){if(this.isInstanced=!0,this.instancedCount&&this.instancedCount!==e.count*e.divisor)return console.warn("geometry has multiple instanced buffers of different length"),this.instancedCount=Math.min(this.instancedCount,e.count*e.divisor);this.instancedCount=e.count*e.divisor}else"index"===t?this.drawRange.count=e.count:this.attributes.index||(this.drawRange.count=Math.max(this.drawRange.count,e.count))}updateAttribute(t){this.glState.boundBuffer!==t.buffer&&(this.gl.bindBuffer(t.target,t.buffer),this.glState.boundBuffer=t.buffer),this.gl.bufferData(t.target,t.data,this.gl.STATIC_DRAW),t.needsUpdate=!1}setIndex(t){this.addAttribute("index",t)}setDrawRange(t,e){this.drawRange.start=t,this.drawRange.count=e}setInstancedCount(t){this.instancedCount=t}createVAO(t){this.VAOs[t.attributeOrder]=this.gl.renderer.createVertexArray(),this.gl.renderer.bindVertexArray(this.VAOs[t.attributeOrder]),this.bindAttributes(t)}bindAttributes(t){t.attributeLocations.forEach(((t,{name:e,type:i})=>{if(!this.attributes[e])return void console.warn(`active attribute ${e} not being supplied`);const s=this.attributes[e];this.gl.bindBuffer(s.target,s.buffer),this.glState.boundBuffer=s.buffer;let r=1;35674===i&&(r=2),35675===i&&(r=3),35676===i&&(r=4);const n=s.size/r,a=1===r?0:r*r*r,h=1===r?0:r*r;for(let e=0;e<r;e++)this.gl.vertexAttribPointer(t+e,n,s.type,s.normalized,s.stride+a,s.offset+e*h),this.gl.enableVertexAttribArray(t+e),this.gl.renderer.vertexAttribDivisor(t+e,s.divisor)})),this.attributes.index&&this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,this.attributes.index.buffer)}draw({program:t,mode:e=this.gl.TRIANGLES}){this.gl.renderer.currentGeometry!==`${this.id}_${t.attributeOrder}`&&(this.VAOs[t.attributeOrder]||this.createVAO(t),this.gl.renderer.bindVertexArray(this.VAOs[t.attributeOrder]),this.gl.renderer.currentGeometry=`${this.id}_${t.attributeOrder}`),t.attributeLocations.forEach(((t,{name:e})=>{const i=this.attributes[e];i.needsUpdate&&this.updateAttribute(i)})),this.isInstanced?this.attributes.index?this.gl.renderer.drawElementsInstanced(e,this.drawRange.count,this.attributes.index.type,this.attributes.index.offset+2*this.drawRange.start,this.instancedCount):this.gl.renderer.drawArraysInstanced(e,this.drawRange.start,this.drawRange.count,this.instancedCount):this.attributes.index?this.gl.drawElements(e,this.drawRange.count,this.attributes.index.type,this.attributes.index.offset+2*this.drawRange.start):this.gl.drawArrays(e,this.drawRange.start,this.drawRange.count)}getPosition(){const t=this.attributes.position;return t.data?t:h?void 0:(console.warn("No position buffer data found to compute bounds"),h=!0)}computeBoundingBox(t){t||(t=this.getPosition());const e=t.data,i=t.stride?t.stride/e.BYTES_PER_ELEMENT:t.size;this.bounds||(this.bounds={min:new s.Vec3,max:new s.Vec3,center:new s.Vec3,scale:new s.Vec3,radius:1/0});const r=this.bounds.min,n=this.bounds.max,a=this.bounds.center,h=this.bounds.scale;r.set(1/0),n.set(-1/0);for(let t=0,s=e.length;t<s;t+=i){const i=e[t],s=e[t+1],a=e[t+2];r.x=Math.min(i,r.x),r.y=Math.min(s,r.y),r.z=Math.min(a,r.z),n.x=Math.max(i,n.x),n.y=Math.max(s,n.y),n.z=Math.max(a,n.z)}h.sub(n,r),a.add(r,n).divide(2)}computeBoundingSphere(t){t||(t=this.getPosition());const e=t.data,i=t.stride?t.stride/e.BYTES_PER_ELEMENT:t.size;this.bounds||this.computeBoundingBox(t);let s=0;for(let t=0,n=e.length;t<n;t+=i)r.fromArray(e,t),s=Math.max(s,this.bounds.center.squaredDistance(r));this.bounds.radius=Math.sqrt(s)}remove(){for(let t in this.VAOs)this.gl.renderer.deleteVertexArray(this.VAOs[t]),delete this.VAOs[t];for(let t in this.attributes)this.gl.deleteBuffer(this.attributes[t].buffer),delete this.attributes[t]}}},"./node_modules/ogl/src/core/Mesh.js":(t,e,i)=>{i.r(e),i.d(e,{Mesh:()=>h});var s=i("./node_modules/ogl/src/core/Transform.js"),r=i("./node_modules/ogl/src/math/Mat3.js"),n=i("./node_modules/ogl/src/math/Mat4.js");let a=0;class h extends s.Transform{constructor(t,{geometry:e,program:i,mode:s=t.TRIANGLES,frustumCulled:h=!0,renderOrder:o=0}={}){super(),t.canvas||console.error("gl not passed as first argument to Mesh"),this.gl=t,this.id=a++,this.geometry=e,this.program=i,this.mode=s,this.frustumCulled=h,this.renderOrder=o,this.modelViewMatrix=new n.Mat4,this.normalMatrix=new r.Mat3,this.beforeRenderCallbacks=[],this.afterRenderCallbacks=[]}onBeforeRender(t){return this.beforeRenderCallbacks.push(t),this}onAfterRender(t){return this.afterRenderCallbacks.push(t),this}draw({camera:t}={}){this.beforeRenderCallbacks.forEach((e=>e&&e({mesh:this,camera:t}))),t&&(this.program.uniforms.modelMatrix||Object.assign(this.program.uniforms,{modelMatrix:{value:null},viewMatrix:{value:null},modelViewMatrix:{value:null},normalMatrix:{value:null},projectionMatrix:{value:null},cameraPosition:{value:null}}),this.program.uniforms.projectionMatrix.value=t.projectionMatrix,this.program.uniforms.cameraPosition.value=t.worldPosition,this.program.uniforms.viewMatrix.value=t.viewMatrix,this.modelViewMatrix.multiply(t.viewMatrix,this.worldMatrix),this.normalMatrix.getNormalMatrix(this.modelViewMatrix),this.program.uniforms.modelMatrix.value=this.worldMatrix,this.program.uniforms.modelViewMatrix.value=this.modelViewMatrix,this.program.uniforms.normalMatrix.value=this.normalMatrix);let e=this.program.cullFace&&this.worldMatrix.determinant()<0;this.program.use({flipFaces:e}),this.geometry.draw({mode:this.mode,program:this.program}),this.afterRenderCallbacks.forEach((e=>e&&e({mesh:this,camera:t})))}}},"./node_modules/ogl/src/core/Program.js":(t,e,i)=>{i.r(e),i.d(e,{Program:()=>n});let s=1;const r={};class n{constructor(t,{vertex:e,fragment:i,uniforms:r={},transparent:n=!1,cullFace:a=t.BACK,frontFace:o=t.CCW,depthTest:l=!0,depthWrite:u=!0,depthFunc:d=t.LESS}={}){t.canvas||console.error("gl not passed as fist argument to Program"),this.gl=t,this.uniforms=r,this.id=s++,e||console.warn("vertex shader not supplied"),i||console.warn("fragment shader not supplied"),this.transparent=n,this.cullFace=a,this.frontFace=o,this.depthTest=l,this.depthWrite=u,this.depthFunc=d,this.blendFunc={},this.blendEquation={},this.transparent&&!this.blendFunc.src&&(this.gl.renderer.premultipliedAlpha?this.setBlendFunc(this.gl.ONE,this.gl.ONE_MINUS_SRC_ALPHA):this.setBlendFunc(this.gl.SRC_ALPHA,this.gl.ONE_MINUS_SRC_ALPHA));const c=t.createShader(t.VERTEX_SHADER);t.shaderSource(c,e),t.compileShader(c),""!==t.getShaderInfoLog(c)&&console.warn(`${t.getShaderInfoLog(c)}\nVertex Shader\n${h(e)}`);const g=t.createShader(t.FRAGMENT_SHADER);if(t.shaderSource(g,i),t.compileShader(g),""!==t.getShaderInfoLog(g)&&console.warn(`${t.getShaderInfoLog(g)}\nFragment Shader\n${h(i)}`),this.program=t.createProgram(),t.attachShader(this.program,c),t.attachShader(this.program,g),t.linkProgram(this.program),!t.getProgramParameter(this.program,t.LINK_STATUS))return console.warn(t.getProgramInfoLog(this.program));t.deleteShader(c),t.deleteShader(g),this.uniformLocations=new Map;let m=t.getProgramParameter(this.program,t.ACTIVE_UNIFORMS);for(let e=0;e<m;e++){let i=t.getActiveUniform(this.program,e);this.uniformLocations.set(i,t.getUniformLocation(this.program,i.name));const s=i.name.match(/(\w+)/g);i.uniformName=s[0],3===s.length?(i.isStructArray=!0,i.structIndex=Number(s[1]),i.structProperty=s[2]):2===s.length&&isNaN(Number(s[1]))&&(i.isStruct=!0,i.structProperty=s[1])}this.attributeLocations=new Map;const p=[],f=t.getProgramParameter(this.program,t.ACTIVE_ATTRIBUTES);for(let e=0;e<f;e++){const i=t.getActiveAttrib(this.program,e),s=t.getAttribLocation(this.program,i.name);p[s]=i.name,this.attributeLocations.set(i,s)}this.attributeOrder=p.join("")}setBlendFunc(t,e,i,s){this.blendFunc.src=t,this.blendFunc.dst=e,this.blendFunc.srcAlpha=i,this.blendFunc.dstAlpha=s,t&&(this.transparent=!0)}setBlendEquation(t,e){this.blendEquation.modeRGB=t,this.blendEquation.modeAlpha=e}applyState(){this.depthTest?this.gl.renderer.enable(this.gl.DEPTH_TEST):this.gl.renderer.disable(this.gl.DEPTH_TEST),this.cullFace?this.gl.renderer.enable(this.gl.CULL_FACE):this.gl.renderer.disable(this.gl.CULL_FACE),this.blendFunc.src?this.gl.renderer.enable(this.gl.BLEND):this.gl.renderer.disable(this.gl.BLEND),this.cullFace&&this.gl.renderer.setCullFace(this.cullFace),this.gl.renderer.setFrontFace(this.frontFace),this.gl.renderer.setDepthMask(this.depthWrite),this.gl.renderer.setDepthFunc(this.depthFunc),this.blendFunc.src&&this.gl.renderer.setBlendFunc(this.blendFunc.src,this.blendFunc.dst,this.blendFunc.srcAlpha,this.blendFunc.dstAlpha),this.gl.renderer.setBlendEquation(this.blendEquation.modeRGB,this.blendEquation.modeAlpha)}use({flipFaces:t=!1}={}){let e=-1;this.gl.renderer.currentProgram===this.id||(this.gl.useProgram(this.program),this.gl.renderer.currentProgram=this.id),this.uniformLocations.forEach(((t,i)=>{let s=i.uniformName,r=this.uniforms[s];if(i.isStruct&&(r=r[i.structProperty],s+=`.${i.structProperty}`),i.isStructArray&&(r=r[i.structIndex][i.structProperty],s+=`[${i.structIndex}].${i.structProperty}`),!r)return l(`Active uniform ${s} has not been supplied`);if(r&&void 0===r.value)return l(`${s} uniform is missing a value parameter`);if(r.value.texture)return e+=1,r.value.update(e),a(this.gl,i.type,t,e);if(r.value.length&&r.value[0].texture){const s=[];return r.value.forEach((t=>{e+=1,t.update(e),s.push(e)})),a(this.gl,i.type,t,s)}a(this.gl,i.type,t,r.value)})),this.applyState(),t&&this.gl.renderer.setFrontFace(this.frontFace===this.gl.CCW?this.gl.CW:this.gl.CCW)}remove(){this.gl.deleteProgram(this.program)}}function a(t,e,i,s){s=s.length?function(t){const e=t.length,i=t[0].length;if(void 0===i)return t;const s=e*i;let n=r[s];n||(r[s]=n=new Float32Array(s));for(let s=0;s<e;s++)n.set(t[s],s*i);return n}(s):s;const n=t.renderer.state.uniformLocations.get(i);if(s.length)if(void 0===n||n.length!==s.length)t.renderer.state.uniformLocations.set(i,s.slice(0));else{if(function(t,e){if(t.length!==e.length)return!1;for(let i=0,s=t.length;i<s;i++)if(t[i]!==e[i])return!1;return!0}(n,s))return;n.set?n.set(s):function(t,e){for(let i=0,s=t.length;i<s;i++)t[i]=e[i]}(n,s),t.renderer.state.uniformLocations.set(i,n)}else{if(n===s)return;t.renderer.state.uniformLocations.set(i,s)}switch(e){case 5126:return s.length?t.uniform1fv(i,s):t.uniform1f(i,s);case 35664:return t.uniform2fv(i,s);case 35665:return t.uniform3fv(i,s);case 35666:return t.uniform4fv(i,s);case 35670:case 5124:case 35678:case 35680:return s.length?t.uniform1iv(i,s):t.uniform1i(i,s);case 35671:case 35667:return t.uniform2iv(i,s);case 35672:case 35668:return t.uniform3iv(i,s);case 35673:case 35669:return t.uniform4iv(i,s);case 35674:return t.uniformMatrix2fv(i,!1,s);case 35675:return t.uniformMatrix3fv(i,!1,s);case 35676:return t.uniformMatrix4fv(i,!1,s)}}function h(t){let e=t.split("\n");for(let t=0;t<e.length;t++)e[t]=t+1+": "+e[t];return e.join("\n")}let o=0;function l(t){o>100||(console.warn(t),o++,o>100&&console.warn("More than 100 program warnings - stopping logs."))}},"./node_modules/ogl/src/core/Texture.js":(t,e,i)=>{i.r(e),i.d(e,{Texture:()=>a});const s=new Uint8Array(4);function r(t){return 0==(t&t-1)}let n=1;class a{constructor(t,{image:e,target:i=t.TEXTURE_2D,type:s=t.UNSIGNED_BYTE,format:r=t.RGBA,internalFormat:a=r,wrapS:h=t.CLAMP_TO_EDGE,wrapT:o=t.CLAMP_TO_EDGE,generateMipmaps:l=!0,minFilter:u=(l?t.NEAREST_MIPMAP_LINEAR:t.LINEAR),magFilter:d=t.LINEAR,premultiplyAlpha:c=!1,unpackAlignment:g=4,flipY:m=i==t.TEXTURE_2D,anisotropy:p=0,level:f=0,width:x,height:y=x}={}){this.gl=t,this.id=n++,this.image=e,this.target=i,this.type=s,this.format=r,this.internalFormat=a,this.minFilter=u,this.magFilter=d,this.wrapS=h,this.wrapT=o,this.generateMipmaps=l,this.premultiplyAlpha=c,this.unpackAlignment=g,this.flipY=m,this.anisotropy=Math.min(p,this.gl.renderer.parameters.maxAnisotropy),this.level=f,this.width=x,this.height=y,this.texture=this.gl.createTexture(),this.store={image:null},this.glState=this.gl.renderer.state,this.state={},this.state.minFilter=this.gl.NEAREST_MIPMAP_LINEAR,this.state.magFilter=this.gl.LINEAR,this.state.wrapS=this.gl.REPEAT,this.state.wrapT=this.gl.REPEAT,this.state.anisotropy=0}bind(){this.glState.textureUnits[this.glState.activeTextureUnit]!==this.id&&(this.gl.bindTexture(this.target,this.texture),this.glState.textureUnits[this.glState.activeTextureUnit]=this.id)}update(t=0){const e=!(this.image===this.store.image&&!this.needsUpdate);if((e||this.glState.textureUnits[t]!==this.id)&&(this.gl.renderer.activeTexture(t),this.bind()),e){if(this.needsUpdate=!1,this.flipY!==this.glState.flipY&&(this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL,this.flipY),this.glState.flipY=this.flipY),this.premultiplyAlpha!==this.glState.premultiplyAlpha&&(this.gl.pixelStorei(this.gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,this.premultiplyAlpha),this.glState.premultiplyAlpha=this.premultiplyAlpha),this.unpackAlignment!==this.glState.unpackAlignment&&(this.gl.pixelStorei(this.gl.UNPACK_ALIGNMENT,this.unpackAlignment),this.glState.unpackAlignment=this.unpackAlignment),this.minFilter!==this.state.minFilter&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_MIN_FILTER,this.minFilter),this.state.minFilter=this.minFilter),this.magFilter!==this.state.magFilter&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_MAG_FILTER,this.magFilter),this.state.magFilter=this.magFilter),this.wrapS!==this.state.wrapS&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_WRAP_S,this.wrapS),this.state.wrapS=this.wrapS),this.wrapT!==this.state.wrapT&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_WRAP_T,this.wrapT),this.state.wrapT=this.wrapT),this.anisotropy&&this.anisotropy!==this.state.anisotropy&&(this.gl.texParameterf(this.target,this.gl.renderer.getExtension("EXT_texture_filter_anisotropic").TEXTURE_MAX_ANISOTROPY_EXT,this.anisotropy),this.state.anisotropy=this.anisotropy),this.image){if(this.image.width&&(this.width=this.image.width,this.height=this.image.height),this.target===this.gl.TEXTURE_CUBE_MAP)for(let t=0;t<6;t++)this.gl.texImage2D(this.gl.TEXTURE_CUBE_MAP_POSITIVE_X+t,this.level,this.internalFormat,this.format,this.type,this.image[t]);else if(ArrayBuffer.isView(this.image))this.gl.texImage2D(this.target,this.level,this.internalFormat,this.width,this.height,0,this.format,this.type,this.image);else if(this.image.isCompressedTexture)for(let t=0;t<this.image.length;t++)this.gl.compressedTexImage2D(this.target,t,this.internalFormat,this.image[t].width,this.image[t].height,0,this.image[t].data);else this.gl.texImage2D(this.target,this.level,this.internalFormat,this.format,this.type,this.image);this.generateMipmaps&&(this.gl.renderer.isWebgl2||r(this.image.width)&&r(this.image.height)?this.gl.generateMipmap(this.target):(this.generateMipmaps=!1,this.wrapS=this.wrapT=this.gl.CLAMP_TO_EDGE,this.minFilter=this.gl.LINEAR)),this.onUpdate&&this.onUpdate()}else if(this.target===this.gl.TEXTURE_CUBE_MAP)for(let t=0;t<6;t++)this.gl.texImage2D(this.gl.TEXTURE_CUBE_MAP_POSITIVE_X+t,0,this.gl.RGBA,1,1,0,this.gl.RGBA,this.gl.UNSIGNED_BYTE,s);else this.width?this.gl.texImage2D(this.target,this.level,this.internalFormat,this.width,this.height,0,this.format,this.type,null):this.gl.texImage2D(this.target,0,this.gl.RGBA,1,1,0,this.gl.RGBA,this.gl.UNSIGNED_BYTE,s);this.store.image=this.image}}}},"./node_modules/ogl/src/extras/Plane.js":(t,e,i)=>{i.r(e),i.d(e,{Plane:()=>r});var s=i("./node_modules/ogl/src/core/Geometry.js");class r extends s.Geometry{constructor(t,{width:e=1,height:i=1,widthSegments:s=1,heightSegments:n=1,attributes:a={}}={}){const h=s,o=n,l=(h+1)*(o+1),u=h*o*6,d=new Float32Array(3*l),c=new Float32Array(3*l),g=new Float32Array(2*l),m=u>65536?new Uint32Array(u):new Uint16Array(u);r.buildPlane(d,c,g,m,e,i,0,h,o),Object.assign(a,{position:{size:3,data:d},normal:{size:3,data:c},uv:{size:2,data:g},index:{data:m}}),super(t,a)}static buildPlane(t,e,i,s,r,n,a,h,o,l=0,u=1,d=2,c=1,g=-1,m=0,p=0){const f=m,x=r/h,y=n/o;for(let w=0;w<=o;w++){let b=w*y-n/2;for(let n=0;n<=h;n++,m++){let y=n*x-r/2;if(t[3*m+l]=y*c,t[3*m+u]=b*g,t[3*m+d]=a/2,e[3*m+l]=0,e[3*m+u]=0,e[3*m+d]=a>=0?1:-1,i[2*m]=n/h,i[2*m+1]=1-w/o,w===o||n===h)continue;let A=f+n+w*(h+1),E=f+n+(w+1)*(h+1),v=f+n+(w+1)*(h+1)+1,_=f+n+w*(h+1)+1;s[6*p]=A,s[6*p+1]=E,s[6*p+2]=_,s[6*p+3]=E,s[6*p+4]=v,s[6*p+5]=_,p++}}}}},"./node_modules/ogl/src/math/Mat3.js":(t,e,i)=>{i.r(e),i.d(e,{Mat3:()=>r});var s=i("./node_modules/ogl/src/math/functions/Mat3Func.js");class r extends Array{constructor(t=1,e=0,i=0,s=0,r=1,n=0,a=0,h=0,o=1){return super(t,e,i,s,r,n,a,h,o),this}set(t,e,i,r,n,a,h,o,l){return t.length?this.copy(t):(s.set(this,t,e,i,r,n,a,h,o,l),this)}translate(t,e=this){return s.translate(this,e,t),this}rotate(t,e=this){return s.rotate(this,e,t),this}scale(t,e=this){return s.scale(this,e,t),this}multiply(t,e){return e?s.multiply(this,t,e):s.multiply(this,this,t),this}identity(){return s.identity(this),this}copy(t){return s.copy(this,t),this}fromMatrix4(t){return s.fromMat4(this,t),this}fromQuaternion(t){return s.fromQuat(this,t),this}fromBasis(t,e,i){return this.set(t[0],t[1],t[2],e[0],e[1],e[2],i[0],i[1],i[2]),this}inverse(t=this){return s.invert(this,t),this}getNormalMatrix(t){return s.normalFromMat4(this,t),this}}},"./node_modules/ogl/src/math/functions/Mat3Func.js":(t,e,i)=>{i.r(e),i.d(e,{fromMat4:()=>s,fromQuat:()=>r,copy:()=>n,set:()=>a,identity:()=>h,transpose:()=>o,invert:()=>l,determinant:()=>u,multiply:()=>d,translate:()=>c,rotate:()=>g,scale:()=>m,normalFromMat4:()=>p,projection:()=>f,add:()=>x,subtract:()=>y,multiplyScalar:()=>w});function s(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[4],t[4]=e[5],t[5]=e[6],t[6]=e[8],t[7]=e[9],t[8]=e[10],t}function r(t,e){let i=e[0],s=e[1],r=e[2],n=e[3],a=i+i,h=s+s,o=r+r,l=i*a,u=s*a,d=s*h,c=r*a,g=r*h,m=r*o,p=n*a,f=n*h,x=n*o;return t[0]=1-d-m,t[3]=u-x,t[6]=c+f,t[1]=u+x,t[4]=1-l-m,t[7]=g-p,t[2]=c-f,t[5]=g+p,t[8]=1-l-d,t}function n(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t}function a(t,e,i,s,r,n,a,h,o,l){return t[0]=e,t[1]=i,t[2]=s,t[3]=r,t[4]=n,t[5]=a,t[6]=h,t[7]=o,t[8]=l,t}function h(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=0,t[7]=0,t[8]=1,t}function o(t,e){if(t===e){let i=e[1],s=e[2],r=e[5];t[1]=e[3],t[2]=e[6],t[3]=i,t[5]=e[7],t[6]=s,t[7]=r}else t[0]=e[0],t[1]=e[3],t[2]=e[6],t[3]=e[1],t[4]=e[4],t[5]=e[7],t[6]=e[2],t[7]=e[5],t[8]=e[8];return t}function l(t,e){let i=e[0],s=e[1],r=e[2],n=e[3],a=e[4],h=e[5],o=e[6],l=e[7],u=e[8],d=u*a-h*l,c=-u*n+h*o,g=l*n-a*o,m=i*d+s*c+r*g;return m?(m=1/m,t[0]=d*m,t[1]=(-u*s+r*l)*m,t[2]=(h*s-r*a)*m,t[3]=c*m,t[4]=(u*i-r*o)*m,t[5]=(-h*i+r*n)*m,t[6]=g*m,t[7]=(-l*i+s*o)*m,t[8]=(a*i-s*n)*m,t):null}function u(t){let e=t[0],i=t[1],s=t[2],r=t[3],n=t[4],a=t[5],h=t[6],o=t[7],l=t[8];return e*(l*n-a*o)+i*(-l*r+a*h)+s*(o*r-n*h)}function d(t,e,i){let s=e[0],r=e[1],n=e[2],a=e[3],h=e[4],o=e[5],l=e[6],u=e[7],d=e[8],c=i[0],g=i[1],m=i[2],p=i[3],f=i[4],x=i[5],y=i[6],w=i[7],b=i[8];return t[0]=c*s+g*a+m*l,t[1]=c*r+g*h+m*u,t[2]=c*n+g*o+m*d,t[3]=p*s+f*a+x*l,t[4]=p*r+f*h+x*u,t[5]=p*n+f*o+x*d,t[6]=y*s+w*a+b*l,t[7]=y*r+w*h+b*u,t[8]=y*n+w*o+b*d,t}function c(t,e,i){let s=e[0],r=e[1],n=e[2],a=e[3],h=e[4],o=e[5],l=e[6],u=e[7],d=e[8],c=i[0],g=i[1];return t[0]=s,t[1]=r,t[2]=n,t[3]=a,t[4]=h,t[5]=o,t[6]=c*s+g*a+l,t[7]=c*r+g*h+u,t[8]=c*n+g*o+d,t}function g(t,e,i){let s=e[0],r=e[1],n=e[2],a=e[3],h=e[4],o=e[5],l=e[6],u=e[7],d=e[8],c=Math.sin(i),g=Math.cos(i);return t[0]=g*s+c*a,t[1]=g*r+c*h,t[2]=g*n+c*o,t[3]=g*a-c*s,t[4]=g*h-c*r,t[5]=g*o-c*n,t[6]=l,t[7]=u,t[8]=d,t}function m(t,e,i){let s=i[0],r=i[1];return t[0]=s*e[0],t[1]=s*e[1],t[2]=s*e[2],t[3]=r*e[3],t[4]=r*e[4],t[5]=r*e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t}function p(t,e){let i=e[0],s=e[1],r=e[2],n=e[3],a=e[4],h=e[5],o=e[6],l=e[7],u=e[8],d=e[9],c=e[10],g=e[11],m=e[12],p=e[13],f=e[14],x=e[15],y=i*h-s*a,w=i*o-r*a,b=i*l-n*a,A=s*o-r*h,E=s*l-n*h,v=r*l-n*o,_=u*p-d*m,M=u*f-c*m,T=u*x-g*m,S=d*f-c*p,R=d*x-g*p,F=c*x-g*f,P=y*F-w*R+b*S+A*T-E*M+v*_;return P?(P=1/P,t[0]=(h*F-o*R+l*S)*P,t[1]=(o*T-a*F-l*M)*P,t[2]=(a*R-h*T+l*_)*P,t[3]=(r*R-s*F-n*S)*P,t[4]=(i*F-r*T+n*M)*P,t[5]=(s*T-i*R-n*_)*P,t[6]=(p*v-f*E+x*A)*P,t[7]=(f*b-m*v-x*w)*P,t[8]=(m*E-p*b+x*y)*P,t):null}function f(t,e,i){return t[0]=2/e,t[1]=0,t[2]=0,t[3]=0,t[4]=-2/i,t[5]=0,t[6]=-1,t[7]=1,t[8]=1,t}function x(t,e,i){return t[0]=e[0]+i[0],t[1]=e[1]+i[1],t[2]=e[2]+i[2],t[3]=e[3]+i[3],t[4]=e[4]+i[4],t[5]=e[5]+i[5],t[6]=e[6]+i[6],t[7]=e[7]+i[7],t[8]=e[8]+i[8],t}function y(t,e,i){return t[0]=e[0]-i[0],t[1]=e[1]-i[1],t[2]=e[2]-i[2],t[3]=e[3]-i[3],t[4]=e[4]-i[4],t[5]=e[5]-i[5],t[6]=e[6]-i[6],t[7]=e[7]-i[7],t[8]=e[8]-i[8],t}function w(t,e,i){return t[0]=e[0]*i,t[1]=e[1]*i,t[2]=e[2]*i,t[3]=e[3]*i,t[4]=e[4]*i,t[5]=e[5]*i,t[6]=e[6]*i,t[7]=e[7]*i,t[8]=e[8]*i,t}}},(function(t){t.h=()=>"4db5a403fea0fd7a2b63"}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,